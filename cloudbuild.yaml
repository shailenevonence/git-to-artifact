# steps:
#   # Step 1: Remove the Cloud Build file
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         rm cloudbuild.yaml

#   # Step 2: Dockerize the code and push to the artifact registry
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['build', '-t', 'gcr.io/$PROJECT_ID/gittoartifact', '.']
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['push', 'gcr.io/$PROJECT_ID/gittoartifact']

# options:
#   env:
#     - 'LOGGING_OPTION=CLOUD_LOGGING_ONLY'

# logsBucket: onramp-sample-bucket

steps:
  # Step 1: Remove the Cloud Build file
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        rm cloudbuild.yaml

  # Step 2: Dockerize the code and push to the artifact registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/gittoartifact', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/gittoartifact']

  # Step 3: Deploy the image to a VM using Deployment Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['deployment-manager', 'deployments', 'create', 'new-vm-deployment', '--config', 'vm-deployment.yaml']

options:
  env:
    - 'LOGGING_OPTION=CLOUD_LOGGING_ONLY'

logsBucket: onramp-sample-bucket
